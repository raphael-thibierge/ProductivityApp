<?php

namespace Tests\Feature;

use App\FinancialTransaction;
use App\User;
use Carbon\Carbon;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ExpenseTagsFrequencyPerWeekTest extends TestCase
{

    private $tag = 'cigarettes';

    /**
     * @var User
     */
    private $user = null;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testNoExpenseTest()
    {
        $this->assertCount(0, $this->user->expenses);
    }

    public function testFrequencyStructureTest(){

        $response = $this->actingAs($this->user)->get('tag-frequency?tag=' . $this->tag);

        $response
            ->assertStatus(200)
            ->assertJsonStructure([
                'status',
                'data' => [
                    'tag' => [],
                    'frequencies' => []
                ]
            ]);
    }

    public function testOneTagInQueryTest(){
        // create user

        $response = $this->actingAs($this->user)->get('tag-frequency?tag=' . $this->tag);

        $response->assertJsonCount(1, 'data.tag');
    }

    public function testManyTagsInQueryTest(){

        $response = $this->actingAs($this->user)->get('tag-frequency?tag=' . urlencode("$this->tag test toto" ));

        $response->assertJsonCount(3, 'data.tag');
    }

    public function testNoFrequencyInResponseTest(){

        $response = $this->actingAs($this->user)->get('tag-frequency?tag=' . $this->tag);

        $response->assertJsonCount(0, 'data.frequencies');
    }

    public function testInsertExpenseTest(){
        // user has no expense
        $originalNumberOfExpense = $this->user->expenses()->count();

        // create an expense
        $numberOfExpenseToCreate = 2;
        $expenses = factory(FinancialTransaction::class, 2)->states('cigarettes', 'now')
            ->create()
            ->each(function(FinancialTransaction $expense){
                $expense->user_id = $this->user->id;
                $expense->save();
            });

        $this->assertEquals($expenses->first()->date->weekOfYear, Carbon::now()->weekOfYear);


        // assert expenses exists after insert
        $this->assertCount($originalNumberOfExpense + $numberOfExpenseToCreate, $this->user->expenses);

        // get frequencies
        $response = $this->actingAs($this->user)->get('tag-frequency?tag=' . $this->tag);
        $response
            ->assertStatus(200)
            ->assertJsonCount(1, 'data.frequencies')
            ->assertJsonStructure([
                'status',
                'data' => [
                    'tag' => [],
                    'frequencies' => [
                        '*'  => [
                            '_id' => [
                                'week',
                                'year'
                            ],
                            'occurrence',
                            'price'
                        ]
                    ]
                ]
            ])
            ->assertJsonFragment([
                '_id' => [
                    'week' => Carbon::now()->weekOfYear,
                    'year' => Carbon::now()->year,
                ],
                'occurrence' => $expenses->count(),
                'price' => $expenses->sum('price')
            ]);
    }


}
