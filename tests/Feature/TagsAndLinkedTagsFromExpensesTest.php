<?php

namespace Tests\Feature;

use App\FinancialTransaction;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TagsAndLinkedTagsFromExpensesTest extends TestCase
{

    /**
     * @var User
     */
    private static $user = null;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if (static::$user === null) {
            static::$user = factory(User::class)->create();
        }
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testNoExpense()
    {
        $response = $this->actingAs(static::$user)->get('expenses-graph-data');

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => 'success',
                'data'   => [
                    'nodes' => [],
                    'edges' => [],
                ]
            ])
            ->assertJsonCount(0, 'data.nodes')
            ->assertJsonCount(0, 'data.edges')
        ;
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testWithOneTagInOneExpense()
    {

        $transaction = factory(FinancialTransaction::class)->states('cigarettes')->make(['user_id' => static::$user->id]);
        static::$user->financialTransactions()->create($transaction->toArray());

        $response = $this->actingAs(static::$user)->get('expenses-graph-data');

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => 'success',
                'data'   => [
                    'nodes' => [],
                    'edges' => [],
                ]
            ])
            ->assertJsonCount(1, 'data.nodes')
            ->assertJsonCount(0, 'data.edges')
        ;
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testWithTwoExpenses()
    {

        $transaction = factory(FinancialTransaction::class)->states('cigarettes')->make([
            'user_id' => static::$user->id,
            'tags' => ['cigarettes', '25pack']
        ]);
        static::$user->financialTransactions()->create($transaction->toArray());

        $response = $this->actingAs(static::$user)->get('expenses-graph-data');

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => 'success',
                'data'   => [
                    'nodes' => [],
                    'edges' => [],
                ]
            ])
            ->assertJsonCount(2, 'data.nodes')
            ->assertJsonCount(1, 'data.edges')
        ;
    }




}
