<?php

namespace App\Http\OAuthServices;

use App\OAuthConnection;
use App\User;
use Coinbase\Wallet\Client;
use Coinbase\Wallet\Configuration;
use Illuminate\Http\Request;
use League\OAuth2\Client\Grant\RefreshToken;
use Openclerk\OAuth2\Client\Provider\Coinbase;

/**
 * Created by PhpStorm.
 * User: raphael
 * Date: 09/12/2017
 * Time: 21:45
 */

class CoinbaseOAuthService extends OAuthService
{

    public $service = 'coinbase';

    protected $authorization_url = 'https://www.coinbase.com/oauth/authorize';

    protected $access_token_url = 'http://www.coinbase.com/oauth/token';

    protected $resource_owner_url = 'http://brentertainment.com/oauth2/lockdin/resource';

    protected $redirect_uri = 'https://www.sir-edgar.com/oauth/coinbase/callback';

    protected $scopes = [
        'wallet:accounts:read',
        'wallet:accounts:update',
        //'wallet:accounts:create',
        //'wallet:accounts:delete',
        'wallet:addresses:read',
        //'wallet:addresses:create',
        'wallet:buys:read',
        'wallet:buys:create',
        'wallet:checkouts:read',
        'wallet:checkouts:create',
        'wallet:deposits:read',
        'wallet:deposits:create',
        'wallet:notifications:read',
        'wallet:orders:read',
        'wallet:orders:create',
        'wallet:orders:refund',
        'wallet:payment-methods:read',
        //'wallet:payment-methods:delete',
        'wallet:payment-methods:limits',
        'wallet:sells:read',
        'wallet:sells:create',
        'wallet:transactions:read',
        //'wallet:transactions:send',
        //'wallet:transactions:request',
        //'wallet:transactions:transfer',
        'wallet:user:read',
        //'wallet:user:update',
        //'wallet:user:email',
        'wallet:withdrawals:read',
        'wallet:withdrawals:create',
    ];

    public function __construct(User $user)
    {
        parent::__construct($user);
    }

    private function getProvider()
    {
        //return GenericProvider
        //return parent::getProvider(); // TODO: Change the autogenerated stub
        $redirect_uri = config('app.env') === 'local' ?  "https://f91420dd.ngrok.io/oauth/$this->service/callback" : route('oauth.callback', ['service' => $this->service]);
        $provider = new Coinbase([
            'clientId'      => $this->getKey(),
            'clientSecret'  => $this->getSecret(),
            'redirectUri'   => $redirect_uri,
            'scopes'        => $this->scopes,
        ]);
        return $provider;
    }

    public function getAuthorizationUrl(): string
    {
        return $this->getProvider()->getAuthorizationUrl() . '&account=all';
    }


    public function getAccessToken(): ?string
    {
        return $this->oAuthConnection !== null ? $this->oAuthConnection->access_token : null;
    }

    public function getRefreshToken(): ?string
    {
        return $this->oAuthConnection !== null ? $this->oAuthConnection->refresh_token : null;
    }

    public function refreshToken(): void
    {
        $provider = $this->getProvider();

        $grant = new RefreshToken();
        $token_object = $provider->getAccessToken($grant, ['refresh_token' => $this->oAuthConnection->refresh_token]);

        $this->oAuthConnection->update([
            'access_token' => $token_object->accessToken,
            'refresh_token' => $token_object->refreshToken,
            'token_expiration' => $token_object->expires,
        ]);
    }

    public function createOAuthConnection(Request $request): bool
    {
        $token_object = $this->getProvider()->getAccessToken('authorization_code', [
            'code' => $request->get('code')
        ]);

        $access_token = $token_object->accessToken;
        $resourceOwner = [];//$provider->getUserDetails($token_object)->toArray();

        $this->oAuthConnection = $this->user->oAuthConnections()->create([
            'access_token' => $access_token,
            'refresh_token' => $token_object->refreshToken,
            'token_expiration' => $token_object->expires,
            'user_data' => $resourceOwner,
            'service' => $this->service
        ]);

        $this->oAuthConnection->update([
            'user_data' => $this->getApiClient()->getCurrentUser()->getRawData()
        ]);

        return true;
    }

    public function getApiClient(): ?Client{

        if ($this->oAuthConnection === null){
            return null;
        }

        if ($this->oAuthConnection->tokenHasExpired()){
            $this->refreshToken();
        }

        // with a refresh token
        $configuration = Configuration::oauth($this->oAuthConnection->access_token, $this->oAuthConnection->refresh_token);

        return Client::create($configuration);
    }
}